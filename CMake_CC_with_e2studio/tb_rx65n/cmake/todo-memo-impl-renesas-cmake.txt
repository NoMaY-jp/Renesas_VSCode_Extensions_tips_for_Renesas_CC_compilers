TODO:

* Fix FIXMEs
* Reconsider the use of `nul` in the code for detecting CC-RX's Assembler
* Reconsider the process for checking CC-RX's Compiler's C++ features (there are no C++ standards)
* In the case of using Ninja in DOS prompt, setting `chcp 65001` is necessary to display Japanese characters correctly.
* Is it better to add `-goptimize` to all build configurations(DEBUG, MINSIZEREL, RELEASE, RELWITHDEBINFO)?
* Reconsider _RENESAS_NIGHTLY_TEST_MSG about name and purpos. 
* CC-RX's Assembler's listfile extension handling like CC-{RL, RH}'s Assembler
* CC-RL's SMS Assembler
* CC-RL's -Olite option
* CC-RL's C++14 feature
* udcollector

* Check timeout and display an error message
RENESAS-FindBinUtils.cmake
      execute_process(
        COMMAND "${CMAKE_${_CMAKE_PROCESSING_LANGUAGE}_COMPILER}"
        -V
        OUTPUT_VARIABLE output ERROR_VARIABLE output
        RESULT_VARIABLE result
        TIMEOUT 30
      )

* If XConverter is used, show a message at configure time, for example, after displaying assember identification message.
* ex)
* XConverter is not found. Generate .abs file for debugging with CS+.
* XConverter is found. Generate .x file for debugging with e2 studio.    (File extension might be different depending on user setting.)

* Does Ninja's `multi-config` need additional care?
* What is CMake's `preset`?
* What is `list(APPEND CMAKE_${lang}_COMPILER_PREDEFINES_COMMAND "-Wp,-dM" "-E" "-c" "${CMAKE_ROOT}/Modules/CMakeCXXCompilerABI.cpp")`

* Is there any better way to tell LLVM clangd laguage sever about the language standard of each source file?
* The current implementation uses CMAKE_C_STANDARD at configuration start and it doesn't depend on each file.

* Refactoring of code
* Refactoring of regular expression
* Refactoring of usage of CMake's commands

* and more...


Pending issues:

* CMake's script mode issues:
*  no stack dump
*  exit code greater than 1
* set(CMAKE_SYSTEM_NAME Generic-RENESAS) in the toolchain file.
* set(CMAKE_SYSTEM_PROCESSOR RX) or RL78 or RH850 in the toolchain file.
* set(CMAKE_SYSTEM_ARCH RXv1) or S2 or G3M etc in the toolchain file.
* set(CMAKE_<LANG>_COMPILER_TARGET rxv1) or S2 or g3m etc in the toolchain file.
* set(CMAKE_<LANG>_COMPILE_OPTIONS_TARGET -isa=) or -cpu= or -Xcpu= in `RENESAS.cmake`.
* CC-RL's device file path auto detection for compiler and assembler. (Only for linker, it is done.)
* CC-{RL, RH}'s standard library auto seceltion.
* Add support of CMake's IPO/LTO abstraction.
* Add support of CMake's PIE/PIC abstraction.
* Add support of CMake's `treat warning as error` abstraction.
* Add support of CMake's `verbose message` abstraction.
* Add support of CMake's link_directories() command. (But rlink does not have such link flag.) --> Internally use ENV{HLNK_DIR}?
* Add support of CMake's target_link_directories() command. (But rlink does not have such link flag.) --> Internally use ENV{HLNK_DIR}?
* Is there any way to show start message before invoking libgen when Ninja is used
* Additional options for `-msg` options:
*  -msg_form=vs / -Xmsg_form=vs
*  -msg_form=vscode / -Xmsg_form=vscode
*  or -msg_form=raw


Unselected ideas:

* Using ENV{Path} in stead of CMAKE_PROGRAM_PATH. <-- deprecated
* Using CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN in stead of CMAKE_PROGRAM_PATH.

  Selected: <-- deprecated
    set(CMAKE_PROGRAM_PATH ${TOOLCHAIN_PATH} ${EXTERNAL_TOOLCHAIN_PATH})

  Unselected:
    set(ENV{Path} "${TOOLCHAIN_PATH};${EXTERNAL_TOOLCHAIN_PATH};$ENV{Path}")
  Reason:
    The path separator depends on the host operating system.

  Unselected:
    set(CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN ${EXTERNAL_TOOLCHAIN_PATH})
    or
    set(CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN ${EXTERNAL_TOOLCHAIN_PATH})
  Reason:
    The flags seem to belong to a category of CMAKE_<LANG>_FLAGS. It does not seem to be better.


Limitations:

* With respect to Libgen, in the case of Ninja, there are several minutes without any messages during
execution of library generator actually generating or regenerating libraries.

* With respect to Libgen, error/warning/information message conversion for VSCode's problem window
and Visual studio's error list window is perfomed only when Ninja is used. When other build system
such as Make is used, it is not performed.


URLs:

https://cmake.org/cmake/help/latest/search.html
https://gitlab.kitware.com/search?group_id=415&nav_source=navbar&project_id=541&repository_ref=master
https://gitlab.kitware.com/cmake/cmake/-/issues?sort=created_date&state=opened
